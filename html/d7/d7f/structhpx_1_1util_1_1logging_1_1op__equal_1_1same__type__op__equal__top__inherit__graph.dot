digraph "hpx::util::logging::op_equal::same_type_op_equal_top"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="hpx::util::logging\l::op_equal::same_type\l_op_equal_top",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="hpx::util::logging\l::op_equal::same_type\l_op_equal_base",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d91/structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__base.html",tooltip="Base class when you want to implement operator== that will compare based on type and member operator=..."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="hpx::util::logging\l::manipulator::base\l\< raw_param_type, param\l_type, ptr_type_ \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d73/structhpx_1_1util_1_1logging_1_1manipulator_1_1base.html",tooltip="What to use as base class, for your manipulator classes. "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="hpx::util::logging\l::destination::base\l\< arg_type, const arg\l_type &, ptr_type_  \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/dc4/structhpx_1_1util_1_1logging_1_1destination_1_1base.html",tooltip="What to use as base class, for your destination classes. "];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="hpx::util::logging\l::formatter::base\< arg\l_type, arg_type &, ptr\l_type_  \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d9/dc0/structhpx_1_1util_1_1logging_1_1formatter_1_1base.html",tooltip="What to use as base class, for your formatter classes. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="hpx::util::logging\l::op_equal::same_type\l_op_equal\< type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d01/structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal.html",tooltip="Implements operator==, which compares two objects. If they have the same type, it will compare them u..."];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="hpx::util::logging\l::manipulator::class\l_\< type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d06/structhpx_1_1util_1_1logging_1_1manipulator_1_1class__.html",tooltip="Use this when implementing your own formatter or destination class. Don&#39;t use this directly..."];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="hpx::util::logging\l::destination::class\l_\< type, op_e, base_type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d3/d03/structhpx_1_1util_1_1logging_1_1destination_1_1class__.html",tooltip="Use this when implementing your own destination class. "];
  Node6 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="hpx::util::logging\l::formatter::class_\l\< type, op_e, base_type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$de/d9a/structhpx_1_1util_1_1logging_1_1formatter_1_1class__.html",tooltip="Use this when implementing your own formatter class. "];
  Node6 -> Node9 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< generic_holder\< generic\l_type, manipulator_base\l \>, implement_op_equal::\lhas_context, manipulator_base \>" ,fontname="Helvetica"];
  Node9 [label="hpx::util::logging\l::manipulator::class\l_\< generic_holder\< generic\l_type, manipulator_base \>\l, implement_op_equal::has\l_context, manipulator_base \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d06/structhpx_1_1util_1_1logging_1_1manipulator_1_1class__.html"];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="hpx::util::logging\l::manipulator::detail\l::generic_holder\< generic\l_type, manipulator_base \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d6b/structhpx_1_1util_1_1logging_1_1manipulator_1_1detail_1_1generic__holder.html"];
  Node5 -> Node11 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< generic_holder\< generic\l_type, manipulator_base \> \>" ,fontname="Helvetica"];
  Node11 [label="hpx::util::logging\l::op_equal::same_type\l_op_equal\< generic_holder\l\< generic_type, manipulator\l_base \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/d01/structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal.html"];
  Node11 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
}
