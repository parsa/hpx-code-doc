<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376" kind="struct" language="C++" prot="public">
    <compoundname>hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;</compoundname>
    <includes refid="d5/dae/acquire__future_8hpp" local="no">acquire_future.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Range</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a63aa3b6b8da52dcef5a714d9c3bf078c" prot="public" static="no">
        <type><ref refid="d1/dd8/structhpx_1_1traits_1_1future__range__traits" kindref="compound">traits::future_range_traits</ref>&lt; Range &gt;::<ref refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a63aa3b6b8da52dcef5a714d9c3bf078c" kindref="member">future_type</ref></type>
        <definition>typedef traits::future_range_traits&lt;Range&gt;::future_type hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;::future_type</definition>
        <argsstring></argsstring>
        <name>future_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" line="117" column="1" bodyfile="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a04b5caf5b015729440e3da023c78ed91" prot="public" static="no">
        <type>Range</type>
        <definition>typedef Range hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" line="119" column="1" bodyfile="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a3e513cd932f39b948cc88284710f9a89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range_</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; has_push_back&lt; typename std::decay&lt; Range_ &gt;::<ref refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a04b5caf5b015729440e3da023c78ed91" kindref="member">type</ref> &gt;::<ref refid="db/d16/structvalue" kindref="compound">value</ref> &gt;::<ref refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a04b5caf5b015729440e3da023c78ed91" kindref="member">type</ref></type>
        <definition>std::enable_if&lt; has_push_back&lt;typename std::decay&lt;Range_&gt;::type&gt;::value &gt;::type hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;::transform_future_disp</definition>
        <argsstring>(Range_ &amp;&amp;futures, Range &amp;values) const</argsstring>
        <name>transform_future_disp</name>
        <param>
          <type>Range_ &amp;&amp;</type>
          <declname>futures</declname>
        </param>
        <param>
          <type>Range &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" line="125" column="1" bodyfile="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" bodystart="125" bodyend="131"/>
        <references refid="de/d59/namespacehpx_1_1traits_1_1detail_1aaa6c2b0d18577d633a21bc591127d19b" compoundref="df/de2/reserve_8hpp" startline="54" endline="57">hpx::traits::detail::reserve_if_random_access_by_range</references>
        <references refid="db/db9/namespacehpx_1_1parallel_1_1v1_1a32d45550d15f1c22055bc56a431c69f4" compoundref="d4/d47/algorithms_2transform_8hpp" startline="319" endline="326">hpx::parallel::v1::transform</references>
        <references refid="d4/d4a/namespacehpx_1_1util_1_1detail_1_1range__impl_1a31e165df2b865cdd961f35ce938db41a">hpx::util::detail::range_impl::begin</references>
        <references refid="d4/d4a/namespacehpx_1_1util_1_1detail_1_1range__impl_1afb2ea48b0902f52ee4d8b764807b4316">hpx::util::detail::range_impl::end</references>
      </memberdef>
      <memberdef kind="function" id="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a487e4308e82b8ed58b6379909e8627d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range_</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; !has_push_back&lt; typename std::decay&lt; Range_ &gt;::<ref refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a04b5caf5b015729440e3da023c78ed91" kindref="member">type</ref> &gt;::<ref refid="db/d16/structvalue" kindref="compound">value</ref> &gt;::<ref refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a04b5caf5b015729440e3da023c78ed91" kindref="member">type</ref></type>
        <definition>std::enable_if&lt; !has_push_back&lt;typename std::decay&lt;Range_&gt;::type&gt;::value &gt;::type hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;::transform_future_disp</definition>
        <argsstring>(Range_ &amp;&amp;futures, Range &amp;values) const</argsstring>
        <name>transform_future_disp</name>
        <param>
          <type>Range_ &amp;&amp;</type>
          <declname>futures</declname>
        </param>
        <param>
          <type>Range &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" line="137" column="1" bodyfile="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" bodystart="137" bodyend="142"/>
        <references refid="de/d59/namespacehpx_1_1traits_1_1detail_1aaa6c2b0d18577d633a21bc591127d19b" compoundref="df/de2/reserve_8hpp" startline="54" endline="57">hpx::traits::detail::reserve_if_random_access_by_range</references>
        <references refid="db/db9/namespacehpx_1_1parallel_1_1v1_1a32d45550d15f1c22055bc56a431c69f4" compoundref="d4/d47/algorithms_2transform_8hpp" startline="319" endline="326">hpx::parallel::v1::transform</references>
        <references refid="d4/d4a/namespacehpx_1_1util_1_1detail_1_1range__impl_1a31e165df2b865cdd961f35ce938db41a">hpx::util::detail::range_impl::begin</references>
        <references refid="d4/d4a/namespacehpx_1_1util_1_1detail_1_1range__impl_1afb2ea48b0902f52ee4d8b764807b4316">hpx::util::detail::range_impl::end</references>
        <references refid="d7/d7f/forceinline_8hpp_1a6c8f31b01feb29751470093a9a75b04f" compoundref="d7/d7f/forceinline_8hpp" startline="19">HPX_FORCEINLINE</references>
      </memberdef>
      <memberdef kind="function" id="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1ac88b8ee09542f5c03fa4c42ec2058ee4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range_</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d7f/forceinline_8hpp_1a6c8f31b01feb29751470093a9a75b04f" kindref="member">HPX_FORCEINLINE</ref> Range</type>
        <definition>HPX_FORCEINLINE Range hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;::operator()</definition>
        <argsstring>(Range_ &amp;&amp;futures) const</argsstring>
        <name>operator()</name>
        <param>
          <type>Range_ &amp;&amp;</type>
          <declname>futures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" line="146" column="1" bodyfile="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" bodystart="146" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" line="115" column="1" bodyfile="C:/Users/Parsa/Source/Repos/hpx/hpx/traits/acquire_future.hpp" bodystart="109" bodyend="152"/>
    <listofallmembers>
      <member refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a63aa3b6b8da52dcef5a714d9c3bf078c" prot="public" virt="non-virtual"><scope>hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;</scope><name>future_type</name></member>
      <member refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1ac88b8ee09542f5c03fa4c42ec2058ee4" prot="public" virt="non-virtual"><scope>hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;</scope><name>operator()</name></member>
      <member refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a3e513cd932f39b948cc88284710f9a89" prot="public" virt="non-virtual"><scope>hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;</scope><name>transform_future_disp</name></member>
      <member refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a487e4308e82b8ed58b6379909e8627d5" prot="public" virt="non-virtual"><scope>hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;</scope><name>transform_future_disp</name></member>
      <member refid="d1/d69/structhpx_1_1traits_1_1detail_1_1acquire__future__impl_3_01_range_00_01typename_01std_1_1enable_0f1aeb3cf44720e55413de4d620cd376_1a04b5caf5b015729440e3da023c78ed91" prot="public" virt="non-virtual"><scope>hpx::traits::detail::acquire_future_impl&lt; Range, typename std::enable_if&lt; traits::is_future_range&lt; Range &gt;::value &gt;::type &gt;</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
